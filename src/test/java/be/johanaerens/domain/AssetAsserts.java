package be.johanaerens.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAllPropertiesEquals(Asset expected, Asset actual) {
        assertAssetAutoGeneratedPropertiesEquals(expected, actual);
        assertAssetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAllUpdatablePropertiesEquals(Asset expected, Asset actual) {
        assertAssetUpdatableFieldsEquals(expected, actual);
        assertAssetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAutoGeneratedPropertiesEquals(Asset expected, Asset actual) {
        assertThat(expected)
            .as("Verify Asset auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetUpdatableFieldsEquals(Asset expected, Asset actual) {
        assertThat(expected)
            .as("Verify Asset relevant properties")
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(e -> assertThat(e.getBrand()).as("check brand").isEqualTo(actual.getBrand()))
            .satisfies(e -> assertThat(e.getModel()).as("check model").isEqualTo(actual.getModel()))
            .satisfies(e -> assertThat(e.getSerialNumber()).as("check serialNumber").isEqualTo(actual.getSerialNumber()))
            .satisfies(e -> assertThat(e.getPurchaseDate()).as("check purchaseDate").isEqualTo(actual.getPurchaseDate()))
            .satisfies(e -> assertThat(e.getWarantDate()).as("check warantDate").isEqualTo(actual.getWarantDate()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetUpdatableRelationshipsEquals(Asset expected, Asset actual) {
        assertThat(expected)
            .as("Verify Asset relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
